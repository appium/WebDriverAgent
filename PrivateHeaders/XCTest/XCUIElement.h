//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <XCTest/XCUIElement.h>

@class XCUIDevice;

@class NSString, XCElementSnapshot, XCTLocalizableStringInfo, XCUIApplication, XCUICoordinate, XCUIElementQuery;

@interface XCUIElement ()
{
    _Bool _safeQueryResolutionEnabled;
    XCUIElementQuery *_query;
    XCElementSnapshot *_lastSnapshot;
}

+ (id)standardAttributeNames;
+ (_Bool)_dispatchEventWithEventBuilder:(id)arg1 eventSynthesizer:(id)arg2 withSnapshot:(id)arg3 applicationSnapshot:(id)arg4 process:(id)arg5 error:(id *)arg6;
+ (_Bool)_isInvalidEventDuration:(double)arg1;
//- (void).cxx_destruct;
@property _Bool safeQueryResolutionEnabled; // @synthesize safeQueryResolutionEnabled=_safeQueryResolutionEnabled;
@property(retain) XCElementSnapshot *lastSnapshot; // @synthesize lastSnapshot=_lastSnapshot;
@property(readonly) XCUIElementQuery *query; // @synthesize query=_query;
@property(copy) XCUIElementQuery *statusItems;
@property(copy) XCUIElementQuery *otherElements;
@property(copy) XCUIElementQuery *handles;
@property(copy) XCUIElementQuery *layoutItems;
@property(copy) XCUIElementQuery *layoutAreas;
@property(copy) XCUIElementQuery *cells;
@property(copy) XCUIElementQuery *levelIndicators;
@property(copy) XCUIElementQuery *grids;
@property(copy) XCUIElementQuery *rulerMarkers;
@property(copy) XCUIElementQuery *rulers;
@property(copy) XCUIElementQuery *dockItems;
@property(copy) XCUIElementQuery *mattes;
@property(copy) XCUIElementQuery *helpTags;
@property(copy) XCUIElementQuery *colorWells;
@property(copy) XCUIElementQuery *relevanceIndicators;
@property(copy) XCUIElementQuery *splitters;
@property(copy) XCUIElementQuery *splitGroups;
@property(copy) XCUIElementQuery *valueIndicators;
@property(copy) XCUIElementQuery *ratingIndicators;
@property(copy) XCUIElementQuery *timelines;
@property(copy) XCUIElementQuery *decrementArrows;
@property(copy) XCUIElementQuery *incrementArrows;
@property(copy) XCUIElementQuery *steppers;
@property(copy) XCUIElementQuery *webViews;
@property(copy) XCUIElementQuery *maps;
@property(copy) XCUIElementQuery *menuBarItems;
@property(copy) XCUIElementQuery *menuBars;
@property(copy) XCUIElementQuery *menuItems;
@property(copy) XCUIElementQuery *menus;
@property(copy) XCUIElementQuery *textViews;
@property(copy) XCUIElementQuery *datePickers;
@property(copy) XCUIElementQuery *secureTextFields;
@property(copy) XCUIElementQuery *textFields;
@property(copy) XCUIElementQuery *staticTexts;
@property(copy) XCUIElementQuery *scrollBars;
@property(copy) XCUIElementQuery *scrollViews;
@property(copy) XCUIElementQuery *searchFields;
@property(copy) XCUIElementQuery *icons;
@property(copy) XCUIElementQuery *images;
@property(copy) XCUIElementQuery *links;
@property(copy) XCUIElementQuery *toggles;
@property(copy) XCUIElementQuery *switches;
@property(copy) XCUIElementQuery *pickerWheels;
@property(copy) XCUIElementQuery *pickers;
@property(copy) XCUIElementQuery *segmentedControls;
@property(copy) XCUIElementQuery *activityIndicators;
@property(copy) XCUIElementQuery *progressIndicators;
@property(copy) XCUIElementQuery *pageIndicators;
@property(copy) XCUIElementQuery *sliders;
@property(copy) XCUIElementQuery *collectionViews;
@property(copy) XCUIElementQuery *browsers;
@property(copy) XCUIElementQuery *disclosedChildRows;
@property(copy) XCUIElementQuery *outlineRows;
@property(copy) XCUIElementQuery *outlines;
@property(copy) XCUIElementQuery *tableColumns;
@property(copy) XCUIElementQuery *tableRows;
@property(copy) XCUIElementQuery *tables;
@property(copy) XCUIElementQuery *statusBars;
@property(copy) XCUIElementQuery *toolbars;
@property(copy) XCUIElementQuery *tabGroups;
@property(copy) XCUIElementQuery *tabs;
@property(copy) XCUIElementQuery *tabBars;
@property(copy) XCUIElementQuery *navigationBars;
@property(copy) XCUIElementQuery *keys;
@property(copy) XCUIElementQuery *keyboards;
@property(copy) XCUIElementQuery *popovers;
@property(copy) XCUIElementQuery *toolbarButtons;
@property(copy) XCUIElementQuery *menuButtons;
@property(copy) XCUIElementQuery *comboBoxes;
@property(copy) XCUIElementQuery *popUpButtons;
@property(copy) XCUIElementQuery *disclosureTriangles;
@property(copy) XCUIElementQuery *checkBoxes;
@property(copy) XCUIElementQuery *radioGroups;
@property(copy) XCUIElementQuery *radioButtons;
@property(copy) XCUIElementQuery *buttons;
@property(copy) XCUIElementQuery *dialogs;
@property(copy) XCUIElementQuery *bannerNotifications;
@property(copy) XCUIElementQuery *alerts;
@property(copy) XCUIElementQuery *drawers;
@property(copy) XCUIElementQuery *sheets;
@property(copy) XCUIElementQuery *windows;
@property(copy) XCUIElementQuery *groups;
@property(copy) XCUIElementQuery *touchBars;
//- (id)coordinateWithNormalizedOffset:(struct CGVector)arg1;
@property(readonly, copy) XCUICoordinate *hitPointCoordinate;
@property(readonly) _Bool bannerNotificationIsSticky;
@property(readonly) _Bool hasBannerNotificationIsStickyAttribute;
- (id)valueForAccessibilityAttribute:(id)arg1 error:(id *)arg2;
- (id)valuesForAccessibilityAttributes:(id)arg1 error:(id *)arg2;
@property(readonly) _Bool isTopLevelTouchBarElement;
@property(readonly) _Bool isTouchBarElement;
@property(getter=isHittable) _Bool hittable;
@property(readonly, nonatomic) long long interfaceOrientation;
- (unsigned long long)traits;
@property(readonly) _Bool hasKeyboardFocus;
@property(readonly, copy) XCTLocalizableStringInfo *localizableStringInfo;
//@property long long horizontalSizeClass;
//@property long long verticalSizeClass;
//@property unsigned long long elementType;
@property(copy) NSString *label;
@property(getter=isSelected) _Bool selected;
@property(getter=isEnabled) _Bool enabled;
@property NSString *identifier;
@property NSString *placeholderValue;
@property(copy) NSString *title;
@property struct CGRect frame;
@property id value;
- (_Bool)resolveOrRaiseTestFailure:(_Bool)arg1 error:(id *)arg2;
- (void)resolveOrRaiseTestFailure;
- (_Bool)_waitForNonExistenceWithTimeout:(double)arg1;
- (id)makeNonExistenceExpectation;
- (_Bool)waitForExistenceWithTimeout:(double)arg1;
- (_Bool)_waitForExistenceWithTimeout:(double)arg1;
- (_Bool)evaluatePredicateForExpectation:(id)arg1 debugMessage:(id *)arg2;
- (id)_debugDescriptionWithSnapshot:(id)arg1 noMatchesMessage:(id)arg2;
@property(copy) NSString *debugDescription;
@property(readonly, copy) NSString *compactDescription;
@property(readonly, copy) NSString *description;
@property XCUIElement *firstMatch;
@property(readonly, copy) XCUIElement *excludingNonModalElements;
@property(readonly, copy) XCUIElement *includingNonModalElements;
- (id)_childrenMatchingTypes:(id)arg1;
//- (id)childrenMatchingType:(unsigned long long)arg1;
- (id)_descendantsMatchingTypes:(id)arg1;
//- (id)descendantsMatchingType:(unsigned long long)arg1;
@property _Bool exists;
@property(readonly) XCUIDevice *device;
@property(readonly, nonatomic) XCUIApplication *application;
@property(readonly, copy) XCUIElement *elementBoundByAccessibilityElement;
- (id)initWithElementQuery:(id)arg1;
- (id)screenshot;
- (id)snapshotWithError:(id *)arg1;
- (_Bool)_allUIInterruptionsHandledForElementSnapshot:(id)arg1 error:(id *)arg2;
- (_Bool)_shouldDispatchEvent:(id *)arg1;
- (void)_dispatchEvent:(id)arg1 eventBuilder:(id)arg2;
- (_Bool)_dispatchEventWithEventBuilder:(id)arg1 error:(id *)arg2;
- (void)typeText:(id)arg1;
- (_Bool)_focusValidForElementSnapshot:(id)arg1 error:(id *)arg2;
- (void)rotate:(double)arg1 withVelocity:(double)arg2;
- (void)pinchWithScale:(double)arg1 velocity:(double)arg2;
- (void)swipeRightWithVelocity:(double)arg1;
- (void)swipeLeftWithVelocity:(double)arg1;
- (void)swipeDownWithVelocity:(double)arg1;
- (void)swipeUpWithVelocity:(double)arg1;
- (void)swipeRight;
- (void)swipeLeft;
- (void)swipeDown;
- (void)swipeUp;
- (void)_swipe:(unsigned long long)arg1 withVelocity:(double)arg2;
- (void)_pressWithPressure:(double)arg1 pressDuration:(double)arg2 holdDuration:(double)arg3 releaseDuration:(double)arg4 activityTitle:(id)arg5;
- (void)pressForDuration:(double)arg1 thenDragToElement:(id)arg2 withVelocity:(double)arg3 thenHoldForDuration:(double)arg4;
- (void)pressForDuration:(double)arg1 thenDragToElement:(id)arg2;
- (void)pressForDuration:(double)arg1;
- (void)_tapWithNumberOfTaps:(unsigned long long)arg1 numberOfTouches:(unsigned long long)arg2 activityTitle:(id)arg3;
- (id)_highestNonWindowAncestorOfElement:(id)arg1 notSharedWithElement:(id)arg2;
- (id)_pointsInFrame:(struct CGRect)arg1 numberOfTouches:(unsigned long long)arg2;
- (void)tapWithNumberOfTaps:(unsigned long long)arg1 numberOfTouches:(unsigned long long)arg2;
- (void)twoFingerTap;
- (void)doubleTap;
- (void)tap;
- (id)_hitPointByAttemptingToScrollToVisibleSnapshot:(id)arg1 error:(id *)arg2;
- (void)adjustToNormalizedSliderPosition:(double)arg1;
@property(readonly) double normalizedSliderPosition;
- (id)_normalizedSliderPositionForSnapshot:(id)arg1 isVertical:(_Bool *)arg2 error:(id *)arg3;
- (id)_iOSSliderAdjustmentEventWithTargetPosition:(double)arg1 snapshot:(id)arg2 error:(id *)arg3;
- (id)_normalizedUISliderPositionForSnapshot:(id)arg1 isVertical:(_Bool *)arg2 error:(id *)arg3;
- (void)adjustToPickerWheelValue:(id)arg1;
- (void)tapOrClick;
- (void)pressWithPressure:(double)arg1 duration:(double)arg2;
- (void)forcePress;

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

