//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "XCTDRemoteAutomationClient.h"
#import "XCTRemoteApplicationAutomationClient.h"
#import "XCUIApplicationAutomationSessionProviding.h"
#import "XCUIDeviceEventAndStateInterface.h"
#import "XCUIEventSynthesizing.h"
#import "XCUIPlatformApplicationServicesProviding.h"
#import "XCUIRemoteAccessibilityInterface.h"
#import "XCUIRemoteSiriInterface.h"
#import "XCUIScreenDataSource.h"

@class NSObject<OS_dispatch_queue>, NSString, XCTCapabilities;

@interface XCUIDeviceRemoteAutomationSession : NSObject <XCTDRemoteAutomationClient, XCTRemoteApplicationAutomationClient, XCUIPlatformApplicationServicesProviding, XCUIRemoteAccessibilityInterface, XCUIEventSynthesizing, XCUIDeviceEventAndStateInterface, XCUIRemoteSiriInterface, XCUIScreenDataSource, XCUIApplicationAutomationSessionProviding>
{
    BOOL _isConnected;
    BOOL _valid;
    id <XCUIApplicationPlatformServicesProviderDelegate> platformApplicationServicesProviderDelegate;
    id <XCTDaemonProxy> _daemonProxy;
    id <XCTDaemonProxyProviding> _proxyProvider;
    XCTCapabilities *_remoteCapabilities;
    id <XCUIDeviceRemoteDaemonConnectionProviding> _connectionProvider;
    id <XCUIDeviceRemoteAutomationSessionDelegate> _delegate;
    id <XCUIAXNotificationHandling> _axNotificationHandler;
    NSObject<OS_dispatch_queue> *_queue;
    XCTCapabilities *_remoteInterfaceCapabilities;
}

+ (id)automationSessionBlacklist;
+ (id)legacyRemoteCapabilities;
+ (id)capabilities;
+ (void)requestCapabilitiesFromDaemonProxy:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (void)requestSessionWithDaemonConnectionProvider:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(retain) XCTCapabilities *remoteInterfaceCapabilities; // @synthesize remoteInterfaceCapabilities=_remoteInterfaceCapabilities;
@property(getter=isValid) BOOL valid; // @synthesize valid=_valid;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property BOOL isConnected; // @synthesize isConnected=_isConnected;
@property(retain) id <XCUIAXNotificationHandling> axNotificationHandler; // @synthesize axNotificationHandler=_axNotificationHandler;
@property __weak id <XCUIDeviceRemoteAutomationSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) id <XCUIDeviceRemoteDaemonConnectionProviding> connectionProvider; // @synthesize connectionProvider=_connectionProvider;
@property(readonly) XCTCapabilities *remoteCapabilities; // @synthesize remoteCapabilities=_remoteCapabilities;
@property(readonly) id <XCTDaemonProxyProviding> proxyProvider; // @synthesize proxyProvider=_proxyProvider;
@property(readonly) id <XCTDaemonProxy> daemonProxy; // @synthesize daemonProxy=_daemonProxy;
@property __weak id <XCUIApplicationPlatformServicesProviderDelegate> platformApplicationServicesProviderDelegate; // @synthesize platformApplicationServicesProviderDelegate;
- (void).cxx_destruct;
- (void)requestAutomationSessionBlacklist:(CDUnknownBlockType)arg1;
- (void)requestAutomationSessionForTestTargetWithPID:(int)arg1 preferredBackendPath:(id)arg2 reply:(CDUnknownBlockType)arg3;
@property(readonly) long long applicationAutomationSessionSupport;
@property(readonly) BOOL supportsInjectingVoiceRecognitionAudioInputPaths;
- (void)injectVoiceRecognitionAudioInputPaths:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)injectAssistantRecognitionStrings:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly) BOOL supportsStartingSiriUIRequestWithAudioFileURL;
- (void)startSiriUIRequestWithAudioFileURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)startSiriUIRequestWithText:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestSiriEnabledStatus:(CDUnknownBlockType)arg1;
- (void)requestScreenshotOfScreenWithID:(long long)arg1 withRect:(struct CGRect)arg2 scale:(double)arg3 formatUTI:(id)arg4 compressionQuality:(double)arg5 withReply:(CDUnknownBlockType)arg6;
- (void)requestScaleForScreenWithIdentifier:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestScreenIdentifiersWithCompletion:(CDUnknownBlockType)arg1;
- (id)_XCTD_interfaceOrientationDidChange:(id)arg1;
- (id)_XCTD_deviceOrientationDidChange:(id)arg1;
- (void)getDeviceOrientationWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateDeviceOrientation:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)performDeviceEvent:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)requestPressureEventsSupportedOrError:(id *)arg1;
- (id)synthesizeEvent:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly) unsigned long long attachedForceCapableDeviceID;
@property(readonly) unsigned long long currentKeyboardModifierFlags;
- (void)fetchSnapshotForElement:(id)arg1 attributes:(id)arg2 parameters:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)snapshotForElement:(id)arg1 attributes:(id)arg2 parameters:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)requestSnapshotForElement:(id)arg1 attributes:(id)arg2 parameters:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)requestElementAtPoint:(struct CGPoint)arg1 reply:(CDUnknownBlockType)arg2;
- (void)unregisterForAccessibilityNotification:(int)arg1 registrationToken:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)registerForAccessibilityNotification:(int)arg1 reply:(CDUnknownBlockType)arg2;
- (void)performAccessibilityAction:(id)arg1 onElement:(id)arg2 value:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)setAttribute:(id)arg1 value:(id)arg2 element:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)fetchParameterizedAttribute:(id)arg1 forElement:(id)arg2 parameter:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)fetchAttributes:(id)arg1 forElement:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)enableFauxCollectionViewCells:(CDUnknownBlockType)arg1;
- (id)_XCTD_receivedAccessibilityNotification:(id)arg1 fromElement:(id)arg2 payload:(id)arg3;
- (void)setAXTimeout:(double)arg1 reply:(CDUnknownBlockType)arg2;
- (void)loadAccessibilityWithTimeout:(double)arg1 reply:(CDUnknownBlockType)arg2;
@property(readonly) BOOL useLegacySnapshotPath;
@property(readonly) BOOL axNotificationsIncludeElement;
- (id)_XCTD_applicationDidUpdateState:(id)arg1;
- (void)terminateApplicationWithBundleID:(id)arg1 pid:(int)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestApplicationSpecifierForPID:(int)arg1 reply:(CDUnknownBlockType)arg2;
- (void)launchApplicationWithPath:(id)arg1 bundleID:(id)arg2 arguments:(id)arg3 environment:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)beginMonitoringApplicationWithSpecifier:(id)arg1;
- (id)remoteAutomationServer;
- (void)invalidate;
- (void)daemonProxyProviderDidDisconnect:(id)arg1;
- (id)initWithDaemonProxy:(id)arg1 proxyProvider:(id)arg2 remoteCapabilities:(id)arg3 connectionProvider:(id)arg4;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

